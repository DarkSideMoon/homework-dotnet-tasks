user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log debug;
# error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  /var/log/nginx/access.log  main;
    access_log  /var/log/nginx/access.log  main;

    # sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  30;

    #gzip  on;

#     send_timeout 5s;


    upstream cdn {
        # The keepalive parameter sets the maximum number of idle keepalive connections
        # to upstream servers that are preserved in the cache of each worker process. When
        # this number is exceeded, the least recently used connections are closed.
        keepalive 36;
#         keepalive_timeout 30s;
#         hash $scheme$request_uri;
        least_conn;
#         ip_hash;
#         hash $remote_addr;
#         random;

        server cdn_cdn-node_1:80 max_fails=1 fail_timeout=60s;
        server cdn_cdn-node_2:80 max_fails=1 fail_timeout=60s;
        server cdn_cdn-node_3:80 max_fails=1 fail_timeout=60s;
#         server cdn_cdn-node_4:80;
        server cdn_cdn-node_4:80 backup;
    }

    server {
        listen 80;

        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        proxy_connect_timeout 5s;

#         keepalive 16;
#         keepalive_timeout 30s;

        location / {
            proxy_pass http://cdn;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
            proxy_http_version 1.1;
            # Remove the Connection header if the client sends it,
            # it could be "close" to close a keepalive connection
            proxy_set_header Connection "";
        }
    }
}